// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersSetup.Gameplay
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ClueGroupSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ClueGroupSettings GetRootAsClueGroupSettings(ByteBuffer _bb) { return GetRootAsClueGroupSettings(_bb, new ClueGroupSettings()); }
  public static ClueGroupSettings GetRootAsClueGroupSettings(ByteBuffer _bb, ClueGroupSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ClueGroupSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TypeId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeIdArray() { return __p.__vector_as_array<byte>(4); }
  public string TitleLid { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleLidBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTitleLidBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTitleLidArray() { return __p.__vector_as_array<byte>(6); }
  public string CorrectIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CorrectIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatBuffersSetup.Gameplay.ClueGroupSettings> CreateClueGroupSettings(FlatBufferBuilder builder,
      StringOffset typeIdOffset = default(StringOffset),
      StringOffset titleLidOffset = default(StringOffset),
      VectorOffset correctIdsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ClueGroupSettings.AddCorrectIds(builder, correctIdsOffset);
    ClueGroupSettings.AddTitleLid(builder, titleLidOffset);
    ClueGroupSettings.AddTypeId(builder, typeIdOffset);
    return ClueGroupSettings.EndClueGroupSettings(builder);
  }

  public static void StartClueGroupSettings(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTypeId(FlatBufferBuilder builder, StringOffset typeIdOffset) { builder.AddOffset(0, typeIdOffset.Value, 0); }
  public static void AddTitleLid(FlatBufferBuilder builder, StringOffset titleLidOffset) { builder.AddOffset(1, titleLidOffset.Value, 0); }
  public static void AddCorrectIds(FlatBufferBuilder builder, VectorOffset correctIdsOffset) { builder.AddOffset(2, correctIdsOffset.Value, 0); }
  public static VectorOffset CreateCorrectIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCorrectIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCorrectIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCorrectIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCorrectIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatBuffersSetup.Gameplay.ClueGroupSettings> EndClueGroupSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffersSetup.Gameplay.ClueGroupSettings>(o);
  }
  public ClueGroupSettingsT UnPack() {
    var _o = new ClueGroupSettingsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ClueGroupSettingsT _o) {
    _o.TypeId = this.TypeId;
    _o.TitleLid = this.TitleLid;
    _o.CorrectIds = new List<string>();
    for (var _j = 0; _j < this.CorrectIdsLength; ++_j) {_o.CorrectIds.Add(this.CorrectIds(_j));}
  }
  public static Offset<FlatBuffersSetup.Gameplay.ClueGroupSettings> Pack(FlatBufferBuilder builder, ClueGroupSettingsT _o) {
    if (_o == null) return default(Offset<FlatBuffersSetup.Gameplay.ClueGroupSettings>);
    var _typeId = _o.TypeId == null ? default(StringOffset) : builder.CreateString(_o.TypeId);
    var _titleLid = _o.TitleLid == null ? default(StringOffset) : builder.CreateString(_o.TitleLid);
    var _correctIds = default(VectorOffset);
    if (_o.CorrectIds != null) {
      var __correctIds = new StringOffset[_o.CorrectIds.Count];
      for (var _j = 0; _j < __correctIds.Length; ++_j) { __correctIds[_j] = builder.CreateString(_o.CorrectIds[_j]); }
      _correctIds = CreateCorrectIdsVector(builder, __correctIds);
    }
    return CreateClueGroupSettings(
      builder,
      _typeId,
      _titleLid,
      _correctIds);
  }
}

public class ClueGroupSettingsT
{
  public string TypeId { get; set; }
  public string TitleLid { get; set; }
  public List<string> CorrectIds { get; set; }

  public ClueGroupSettingsT() {
    this.TypeId = null;
    this.TitleLid = null;
    this.CorrectIds = null;
  }
}


static public class ClueGroupSettingsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*TypeId*/, false)
      && verifier.VerifyString(tablePos, 6 /*TitleLid*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*CorrectIds*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
